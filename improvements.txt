## List of improvements I plan to make ##

# Data storage requirements #

- 33 years (1979-2012) of Merra (288 by 144 global grid) 3 hourly (i.e. 8 timesteps per day) data for a single pressure level = 15 GB 


# Install latest UV-CDAT #

  - The lastest version (1.3.1) of UV-CDAT was released in April 2013 (http://uvcdat.llnl.gov/install/):
    - It leads you to http://sourceforge.net/projects/cdat/files/Releases/UV-CDAT/1.3/, which has a very useful README 
    - I downloaded and unpacked it on my machine, but go error messages when I tried to run UV-CDAT
    - This may be due to the fact that my installation of Ubuntu is old. I tried to upgrade using the upgrade manager, but
      got an error message part way through the process
  
  - It contains the following new packages that I need:
    - Scipy version 11: Has an equal_var keyowrd argument for scipy.stats.ttest_ind() which performs a Welch's t-test
    - Latest windspharm: So I can update calc_wind_quantity so it makes use of cdms2 transient variables
    - eofs: Is a new replacement for eof2 (http://ajdawson.github.com/eofs/) 
    
  - We can't install this new version on abyss because the operating system is too old
    - Either I wait until they upgrade the operating system on abyss (which won't happen until winter 2013 at the earliest), or
    - Brett suggested that he could update the operating system on the vislab machines and install it there, or
    - I could have it installed on my own machine
      - My \scratch directory has 170 MB free space
      - Required installs: uvcdat, GitPython, cdo, nco (everything else like matplotlib, basemap, ipython, is in with uvcdat)
      - Would need assistance with this from Brett and Doug
        - Where do I install it? (/usr/bin/ ??)
	- Where do I put my data? (/scratch ??)
	- Do I need have  


# Version control #

  - Is bitbucket configured properly (sometimes it doesn't recognise who is submitting)


# Provenance tracking # 
 
  - What does this look like?  
    - Unique identifiers and version numbers for raw data (e.g. complete details of the reanalysis data in download README file)
    - Unique identifiers and version numbers for all programs and libraries (e.g. python modules and NCL version)
    - Values of parameters used to generate any given output
    - Names and version numbers of programs (however small) used to generate those outputs (e.g. version numbers for my Python codes). 
    - Where possible this information should be included in the netCDF attributes

  - What package should I use?
    - It seems the GitPython would be most useful (http://pythonhosted.org/GitPython/0.3.1/index.html)
      - I've implemented it as shown here: http://penandpants.com/2013/04/25/data-provenance-with-gitpython/
      - Perhaps I shouldn't have a separate 'git_repo' directory?
    - A possible alternative is Sumatra (http://packages.python.org/Sumatra/)
      - I commented on a Software Carpentry post (http://software-carpentry.org/2012/10/wanted-an-entry-level-provenance-library/)
      - Apparently it's equivalent to using the 'revision' command for svn, that David Kent used to put in all his codes


# General coding practices #

  - Check that the 'calc_monthly_climatology' function in calc_climate_index.py is up to date with the one in calc_monthly_anomaly.py
  - Python has a style guide (see Appendix B.2 of Langtangen). 
    - I could build on this and create my own, adding standard ways to name input files, variables etc
  - Create my own Python cheat sheet, with things I commonly forget 
    - output formats (p 80, Langtangen)
    - variable interpolation (p 31)
    - 0 = false, 1 = true
    - copy and assignment ? it's different for Python lists (section 3.2.10, p 100, Langtangen) versus NumPy arrays (section 4.1.2, p 137)
  - Look into documentation generators. Perhaps I can generate html to put on my bitbucket wiki?
    - Epydoc is the only one that does both HTML and PDF or LaTeX
  - Start a code review group at uni?
  - Take the next step and learn about packaging code for sharing and 'release'
    - Tgis includes specifying the license and installation instructions/files
    - See https://ams.confex.com/ams/93Annual/webprogram/Paper223958.html


# plot_map.py #

  - Figure spacing issues (moves further right depending on how long the row headings are)
  - Vertical colourbar


# netcdf_io.py #

  - Include a linear detrending method?


# calc_waf.py #

  - Use f2py instead of the system calls (simple example, section 1.1.13 of Langtangen)


# LaTeX #

  - Look into embedding vector graphics 
    - Using the latex command you can use .eps, but not .svg
    - Can't use any vector graphics with pdflatex, but really high resolution .png or .jpg might be sufficient
    - Investigate booktabs for nice Latex tables
